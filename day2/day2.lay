import fs from 'std/io/fs';
import re from 'std/regexp';
let File = fs.File;
let RegExp = re.RegExp;

let pattern = RegExp('(\\d+)-(\\d+) (\\w): (\\w+)');

fn isValid1(passwordSet) {
  let match = passwordSet.password.match(RegExp(passwordSet.char, "g"));
  
  let count;
  if match {
    count = match.len();
  } else {
    count = 0;
  }

  return passwordSet.lower <= count 
    and passwordSet.upper >= count;
}

fn isValid2(passwordSet) {
  let first = passwordSet.password[passwordSet.lower - 1] == passwordSet.char;
  let second = passwordSet.password[passwordSet.upper - 1] == passwordSet.char;

  let xor = 0;
  if first {
    xor = xor + 1;  
  }
  if second {
    xor = xor + 1;  
  }

  return xor == 1;
}

class PasswordSet {
  init(lower, upper, char, password) {
    self.lower = lower;
    self.upper = upper;
    self.char = char;
    self.password = password;
  }

  static fromLine(line) {
    let results = pattern.captures(line);
    if !results {
      print("Invalid pattern");
      exit(1);
    }

    return PasswordSet(
      Number.parse(results[1]),
      Number.parse(results[2]),
      results[3],
      results[4]
    );
  }
}

let data = File.readAllText("data.txt");
print(
  data
    .split('\n')
    .map(PasswordSet.fromLine)
    .map(isValid2)
    .filter(|x| x).len()
);
